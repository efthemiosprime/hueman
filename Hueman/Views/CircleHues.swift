//
//  CircleHues.swift
//  ProjectName
//
//  Created by Efthemios Suyat on 1/1/17.
//  Copyright (c) 2017 Hueman. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class CircleHues : NSObject {



    public class func Draw(master: CGFloat = 0.602) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let loveColor = UIColor(red: 0.886, green: 0.341, blue: 0.231, alpha: 1.000)
        let wanderlustColor = UIColor(red: 0.200, green: 0.710, blue: 0.827, alpha: 1.000)
        let onmyplateColor = UIColor(red: 0.969, green: 0.698, blue: 0.263, alpha: 1.000)
        let rayoflightColor = UIColor(red: 0.918, green: 0.804, blue: 0.325, alpha: 1.000)
        let healthColor = UIColor(red: 0.482, green: 0.784, blue: 0.643, alpha: 1.000)
        let hustleColor = UIColor(red: 0.576, green: 0.392, blue: 0.553, alpha: 1.000)
        
        //// Variable Declarations
        let rotateLove: CGFloat = master * 360
        let rotateHustle: CGFloat = master * 360
        let rotateWanderlust: CGFloat = master * 360
        let rotateHealth: CGFloat = master * 360
        let rotateRay: CGFloat = master * 360
        let rotatePlate: CGFloat = master * 360
        
        //// Bezier Drawing
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 20, 20)
        CGContextRotateCTM(context!, -rotatePlate * CGFloat(M_PI) / 180)
        
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 14.16, y: -8.17))
        bezierPath.addLineToPoint(CGPoint(x: 17.31, y: -10))
        bezierPath.addCurveToPoint(CGPoint(x: 0, y: -20), controlPoint1: CGPoint(x: 13.85, y: -15.97), controlPoint2: CGPoint(x: 7.39, y: -20))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: -16.36))
        bezierPath.addCurveToPoint(CGPoint(x: 14.16, y: -8.17), controlPoint1: CGPoint(x: 6.04, y: -16.36), controlPoint2: CGPoint(x: 11.32, y: -13.06))
        bezierPath.closePath()
        onmyplateColor.setFill()
        bezierPath.fill()
        
        CGContextRestoreGState(context!)
        
        
        //// Bezier 2 Drawing
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 20, 20)
        CGContextRotateCTM(context!, -rotateRay * CGFloat(M_PI) / 180)
        
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 17.31, y: -10))
        bezier2Path.addLineToPoint(CGPoint(x: 14.16, y: -8.17))
        bezier2Path.addCurveToPoint(CGPoint(x: 16.36, y: -0), controlPoint1: CGPoint(x: 15.55, y: -5.76), controlPoint2: CGPoint(x: 16.36, y: -2.98))
        bezier2Path.addCurveToPoint(CGPoint(x: 14.16, y: 8.17), controlPoint1: CGPoint(x: 16.36, y: 2.98), controlPoint2: CGPoint(x: 15.55, y: 5.76))
        bezier2Path.addLineToPoint(CGPoint(x: 17.31, y: 9.99))
        bezier2Path.addCurveToPoint(CGPoint(x: 20, y: -0), controlPoint1: CGPoint(x: 19.02, y: 7.05), controlPoint2: CGPoint(x: 20, y: 3.64))
        bezier2Path.addCurveToPoint(CGPoint(x: 17.31, y: -10), controlPoint1: CGPoint(x: 20, y: -3.64), controlPoint2: CGPoint(x: 19.02, y: -7.05))
        bezier2Path.closePath()
        rayoflightColor.setFill()
        bezier2Path.fill()
        
        CGContextRestoreGState(context!)
        
        
        //// Bezier 3 Drawing
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 20, 20)
        CGContextRotateCTM(context!, -rotateHealth * CGFloat(M_PI) / 180)
        
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 0, y: 16.36))
        bezier3Path.addLineToPoint(CGPoint(x: 0, y: 20))
        bezier3Path.addCurveToPoint(CGPoint(x: 17.31, y: 10), controlPoint1: CGPoint(x: 7.39, y: 20), controlPoint2: CGPoint(x: 13.85, y: 15.97))
        bezier3Path.addLineToPoint(CGPoint(x: 14.16, y: 8.17))
        bezier3Path.addCurveToPoint(CGPoint(x: 0, y: 16.36), controlPoint1: CGPoint(x: 11.32, y: 13.06), controlPoint2: CGPoint(x: 6.05, y: 16.36))
        bezier3Path.closePath()
        healthColor.setFill()
        bezier3Path.fill()
        
        CGContextRestoreGState(context!)
        
        
        //// Bezier 6 Drawing
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 20, 20)
        CGContextRotateCTM(context!, -rotateWanderlust * CGFloat(M_PI) / 180)
        
        let bezier6Path = UIBezierPath()
        bezier6Path.moveToPoint(CGPoint(x: -14.16, y: 8.17))
        bezier6Path.addLineToPoint(CGPoint(x: -17.31, y: 10))
        bezier6Path.addCurveToPoint(CGPoint(x: -0, y: 20), controlPoint1: CGPoint(x: -13.85, y: 15.97), controlPoint2: CGPoint(x: -7.39, y: 20))
        bezier6Path.addLineToPoint(CGPoint(x: -0, y: 16.36))
        bezier6Path.addCurveToPoint(CGPoint(x: -14.16, y: 8.17), controlPoint1: CGPoint(x: -6.05, y: 16.36), controlPoint2: CGPoint(x: -11.32, y: 13.06))
        bezier6Path.closePath()
        wanderlustColor.setFill()
        bezier6Path.fill()
        
        CGContextRestoreGState(context!)
        
        
        //// Bezier 4 Drawing
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 20, 20)
        CGContextRotateCTM(context!, -rotateHustle * CGFloat(M_PI) / 180)
        
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: -16.36, y: -0))
        bezier4Path.addCurveToPoint(CGPoint(x: -14.16, y: -8.17), controlPoint1: CGPoint(x: -16.36, y: -2.98), controlPoint2: CGPoint(x: -15.55, y: -5.76))
        bezier4Path.addLineToPoint(CGPoint(x: -17.31, y: -10))
        bezier4Path.addCurveToPoint(CGPoint(x: -20, y: -0), controlPoint1: CGPoint(x: -19.02, y: -7.05), controlPoint2: CGPoint(x: -20, y: -3.64))
        bezier4Path.addCurveToPoint(CGPoint(x: -17.31, y: 10), controlPoint1: CGPoint(x: -20, y: 3.64), controlPoint2: CGPoint(x: -19.02, y: 7.05))
        bezier4Path.addLineToPoint(CGPoint(x: -14.15, y: 8.17))
        bezier4Path.addCurveToPoint(CGPoint(x: -16.36, y: -0), controlPoint1: CGPoint(x: -15.55, y: 5.76), controlPoint2: CGPoint(x: -16.36, y: 2.98))
        bezier4Path.closePath()
        hustleColor.setFill()
        bezier4Path.fill()
        
        CGContextRestoreGState(context!)
        
        
        //// loveBezier Drawing
        CGContextSaveGState(context!)
        CGContextTranslateCTM(context!, 20, 20)
        CGContextRotateCTM(context!, -rotateLove * CGFloat(M_PI) / 180)
        
        let loveBezierPath = UIBezierPath()
        loveBezierPath.moveToPoint(CGPoint(x: 0, y: -16.36))
        loveBezierPath.addLineToPoint(CGPoint(x: 0, y: -20))
        loveBezierPath.addCurveToPoint(CGPoint(x: -17.31, y: -10), controlPoint1: CGPoint(x: -7.39, y: -20), controlPoint2: CGPoint(x: -13.85, y: -15.97))
        loveBezierPath.addLineToPoint(CGPoint(x: -14.16, y: -8.17))
        loveBezierPath.addCurveToPoint(CGPoint(x: 0, y: -16.36), controlPoint1: CGPoint(x: -11.32, y: -13.06), controlPoint2: CGPoint(x: -6.04, y: -16.36))
        loveBezierPath.closePath()
        loveColor.setFill()
        loveBezierPath.fill()
        
        CGContextRestoreGState(context!)
    }

}
